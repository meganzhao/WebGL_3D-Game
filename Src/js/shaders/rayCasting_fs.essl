Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	varying vec2 texCoord; 
	uniform vec4 lightPos[2]; // xyz is the direction, w is 0
	uniform vec4 lightPowerDensity[2]; // w ignored
	uniform vec4 mainDir;
	uniform sampler2D probeTexture;
	uniform vec3 cameraPosition;

	varying vec4 worldPos;
	varying vec3 worldNormal;
	varying vec4 rayDir;

	mat4 A = mat4(	1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, -9	);

	float intersectQuadric(mat4 A, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float discriminant = b * b - 4.0 * a * c;
		if (discriminant < 0.0){
		 	return -1.0;
		}
		float t1 = (-b + sqrt(discriminant)) / (2.0 * a);
		float t2 = (-b - sqrt(discriminant)) / (2.0 * a);
		if (t1 < t2 && t1 > 0.0 || t2 < 0.0){
			return t1;
		} else {
			return t2;
		}
	}

	void main(void) {

		//vec3 viewDir = normalize(cameraPosition - worldPos.xyz);
		// compute ideal reflected direction 
		//vec3 reflDir = reflect(-viewDir, worldNormal);
		//find corresponding point in light probe
		vec3 m = normalize(normalize(rayDir.xyz) + vec3(0,0,1));
		vec2 probeTex = vec2(m.x / 2.0 + 0.5, -m.y / 2.0 + 0.5);
		
		vec4 e = vec4(cameraPosition,1);
		vec4 d = vec4(normalize(rayDir.xyz),0);
		float t = intersectQuadric(A, e, d);
		if (t < 0.0){
			gl_FragColor = texture2D( probeTexture, probeTex);
		} else {
			vec4 intersectPoint = e + d * t;
			vec3 quadricNormal = normalize((A * intersectPoint + intersectPoint * A).xyz);
			gl_FragColor = vec4(quadricNormal, 1);
		}

	}

`;		
		